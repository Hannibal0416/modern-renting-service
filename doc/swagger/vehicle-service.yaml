openapi: 3.0.1
info:
  title: Modern Renting Vehicle Service
  description: SpringBoot 3.x application
  version: v0.0.1
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - BearerAuthentication: []
paths:
  /vehicle/{id}:
    get:
      tags:
        - Vehicle
      summary: Get a vehicle by id
      description: Returns a vehicle
      operationId: getVehicle
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found - The vehicle was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Vehicle
      summary: Update existing vehicle
      description: Update vehicle
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVehicleRequest'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vehicle:
    post:
      tags:
        - Vehicle
      summary: Create new vehicle
      description: Create new vehicle
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVehicleRequest'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /model:
    get:
      tags:
        - Metadata
      summary: Find model by filter
      description: Returns models after filter
      operationId: getModels
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FindModelRequest'
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Metadata
      summary: Create new model
      description: Create new model
      operationId: newModel
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/CreateModelRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /example/vehicles:
    get:
      tags:
        - Example
      operationId: getAll
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleVehicleResponse'
    post:
      tags:
        - Example
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExampleCreateVehicleRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleVehicleResponse'
  /vehicles:
    get:
      tags:
        - Vehicle
      summary: Get vehicles by filter with inclusive operator (AND)
      description: Returns vehicles
      operationId: getVehicles
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 50
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/FindVehiclesRequest'
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found - The vehicles was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /type-brand:
    get:
      tags:
        - Metadata
      summary: Get types and brands
      description: Returns all types and brands
      operationId: getTypeAndBrands
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypeBrandResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /type:
    get:
      tags:
        - Metadata
      summary: Get types
      description: Returns all types
      operationId: getTypes
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /example/vehicles/{id}:
    get:
      tags:
        - Example
      summary: Get a vehicle by id
      description: Returns a vehicle
      operationId: getVehicle_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleVehicleResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleVehicleResponse'
        '404':
          description: Not found - The vehicle was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /example/vehicles/byModelIdAndName:
    get:
      tags:
        - Example
      summary: Get vehicles by name
      description: Returns vehicles
      operationId: getVehicles_1
      parameters:
        - name: request
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ExampleVehicleRequest'
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleVehicleRequest'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleVehicleResponse'
        '404':
          description: Not found - The vehicles was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /brand:
    get:
      tags:
        - Metadata
      summary: Get brands
      description: Returns all brands
      operationId: getBrands
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrandResponse'
        '401':
          description: Unauthorized - Token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    UpdateVehicleRequest:
      required:
        - active
        - modelId
        - name
      type: object
      properties:
        modelId:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          maxLength: 255
          minLength: 3
          type: string
        rentPrice:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
        color:
          type: string
        productionYear:
          type: integer
          format: int32
        seatCount:
          type: integer
          format: int32
        transmission:
          type: string
        fuelType:
          type: string
        active:
          type: boolean
    ErrorResponse:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          example:
            - Not found
          items:
            type: string
            example: '["Not found"]'
    BrandResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ModelResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/TypeResponse'
        typeId:
          type: integer
          format: int32
        brand:
          $ref: '#/components/schemas/BrandResponse'
        brandId:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    TypeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    VehicleResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        model:
          $ref: '#/components/schemas/ModelResponse'
        imageUri:
          type: string
        rentPrice:
          type: string
        name:
          type: string
        color:
          type: string
        productionYear:
          type: integer
          format: int32
        seatCount:
          type: integer
          format: int32
        transmission:
          type: string
        fuelType:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    CreateVehicleRequest:
      required:
        - active
        - modelId
        - name
        - rentPrice
      type: object
      properties:
        modelId:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          maxLength: 255
          minLength: 3
          type: string
        rentPrice:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
        color:
          type: string
        productionYear:
          type: integer
          format: int32
        seatCount:
          type: integer
          format: int32
        transmission:
          type: string
        fuelType:
          type: string
        active:
          type: boolean
    CreateModelRequest:
      required:
        - active
        - brandId
        - name
        - typeId
      type: object
      properties:
        typeId:
          type: integer
          format: int32
        brandId:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        active:
          type: boolean
    ExampleCreateBrandRequest:
      type: object
      properties:
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
    ExampleCreateModelRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ExampleCreateTypeRequest'
        brand:
          $ref: '#/components/schemas/ExampleCreateBrandRequest'
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
    ExampleCreateTypeRequest:
      type: object
      properties:
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
    ExampleCreateVehicleRequest:
      type: object
      properties:
        model:
          $ref: '#/components/schemas/ExampleCreateModelRequest'
        imageUri:
          type: string
        rentPrice:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        productionYear:
          type: integer
          format: int32
        seatCount:
          type: integer
          format: int32
        transmission:
          type: string
        fuelType:
          type: string
        active:
          type: boolean
    ExampleBrandResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ExampleModelResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        typeId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/ExampleTypeResponse'
        brandId:
          type: integer
          format: int32
        brand:
          $ref: '#/components/schemas/ExampleBrandResponse'
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ExampleTypeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        imageUri:
          type: string
        name:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    ExampleVehicleResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        model:
          $ref: '#/components/schemas/ExampleModelResponse'
        imageUri:
          type: string
        rentPrice:
          type: string
        name:
          type: string
        color:
          type: string
        productionYear:
          type: integer
          format: int32
        seatCount:
          type: integer
          format: int32
        transmission:
          type: string
        fuelType:
          type: string
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
    FindVehiclesRequest:
      type: object
      properties:
        typeId:
          type: string
          example: '100001'
        brandId:
          type: string
          example: '100001'
        modelName:
          maxLength: 255
          type: string
          example: Cayenne
        name:
          maxLength: 255
          type: string
          example: Hannibal
    TypeBrandResponse:
      type: object
      properties:
        type:
          type: array
          items:
            $ref: '#/components/schemas/TypeResponse'
        brand:
          type: array
          items:
            $ref: '#/components/schemas/BrandResponse'
    FindModelRequest:
      type: object
      properties:
        typeId:
          type: integer
          format: int32
          example: 100001
        brandId:
          type: integer
          format: int32
          example: 100001
    ExampleVehicleRequest:
      required:
        - modelId
        - name
      type: object
      properties:
        modelId:
          maxLength: 10
          type: string
          example: RevEx
        name:
          maxLength: 10
          type: string
          example: RevEx
  securitySchemes:
    BearerAuthentication:
      type: http
      scheme: bearer
